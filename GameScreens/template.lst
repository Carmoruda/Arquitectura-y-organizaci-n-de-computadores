# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\template.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSETION
  3   0000                      org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3                   DI              ; Disable interruptions.
  7   8001 31 00 00             LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58             LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD F9 80             CALL CLEARSCR   ; Clean screen.
 12   800A
 13   800A              STARTINGSCREEN:
 14   800A                      ; Tetris!
 15   800A 3E 41                LD A, $41       ; Attribute - Blue
 16   800C 06 02                LD B, 2         ; Row
 17   800E 0E 02                LD C, 2         ; Column
 18   8010 DD 21 4B 80          LD IX, WELCOMEMESSAGE
 19   8014 CD 88 80             CALL PRINTAT
 20   8017
 21   8017                      ; Would you like to play? (y/n)
 22   8017 3E 41                LD A, $41       ; Attribute - Blue
 23   8019 06 04                LD B, 4         ; Row
 24   801B 0E 02                LD C, 2         ; Column
 25   801D DD 21 53 80          LD IX, PLAYMESSAGE
 26   8021 CD 88 80             CALL PRINTAT
 27   8024
 28   8024              READBUTTON:
 29   8024 3E DF                LD A, $DF       ; Keys: Y, U, I, O, P
 30   8026 DB FE                IN A, ($FE)     ; Key: Y
 31   8028 CB 67                BIT 4, A
 32   802A 20 F8                JR NZ, READBUTTON
 33   802C
 34   802C              ENDINGSCREEN:
 35   802C CD F9 80             CALL CLEARSCR   ; Clean screen.
 36   802F
 37   802F                      ; Bye!
 38   802F 3E 42                LD A, $42       ; Attribute - Red
 39   8031 06 02                LD B, 2         ; Row
 40   8033 0E 02                LD C, 2         ; Column
 41   8035 DD 21 71 80          LD IX, BYEMESSAGE
 42   8039 CD 88 80             CALL PRINTAT
 43   803C
 44   803C                      ; Would you like to play? (y/n)
 45   803C 3E 42                LD A, $42       ; Attribute - Red
 46   803E 06 04                LD B, 4         ; Row
 47   8040 0E 02                LD C, 2         ; Column
 48   8042 DD 21 76 80          LD IX, PLAYAGAINMESSAGE
 49   8046 CD 88 80             CALL PRINTAT
 50   8049
 51   8049
 52   8049              ENDOFCODE:
 53   8049 18 FE                JR ENDOFCODE
 54   804B
 55   804B 54 45 54 52  WELCOMEMESSAGE: DB "TETRIS!", 0
 55   804F 49 53 21 00
 56   8053 57 4F 55 4C  PLAYMESSAGE: DB "WOULD YOU LIKE TO PLAY? (Y/N)", 0        ; 0 = delimitador de array.
 56   8057 44 20 59 4F
 56   805B 55 20 4C 49
 56   805F 4B 45 20 54
 56   8063 4F 20 50 4C
 56   8067 41 59 3F 20
 56   806B 28 59 2F 4E
 56   806F 29 00
 57   8071 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
 57   8075 00
 58   8076 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0        ; 0 = delimitador de array.
 58   807A 20 41 47 41
 58   807E 49 4E 3F 20
 58   8082 28 59 2F 4E
 58   8086 29 00
 59   8088                      INCLUDE "L30.3 - printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\L30.3 - printat.asm
  1+  8088              ; -------------------------------
  2+  8088              ; ZX Spectrum Text print library
  3+  8088              ; Daniel Le√≥n - AOC - UFV 2020
  4+  8088              ; -------------------------------
  5+  8088
  6+  8088
  7+  8088              ; ----------------------------------------------------------------------------------------
  8+  8088              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  8088              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  8088              ;		IN	B	: Row 0..23
 11+  8088              ;		IN	C	: Column 0..31
 12+  8088              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  8088              ; ----------------------------------------------------------------------------------------
 14+  8088 CD 97 80     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  808B              ; ----------------------------------------------------------------------------------------
 16+  808B              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  808B              ; ----------------------------------------------------------------------------------------
 18+  808B              ; PRINTSTR - Prints String - IX Points to the String start
 19+  808B              ; ----------------------------------------------------------------------------------------
 20+  808B DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  808E B7           			OR A						; check for end of string (0)
 22+  808F C8           			RET Z						; Finish printing if 0
 23+  8090 CD C5 80     			CALL PRINTCHNUM
 24+  8093 DD 23        			INC IX						; Move to next char in string
 25+  8095 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  8097              ; ----------------------------------------------------------------------------------------
 27+  8097
 28+  8097
 29+  8097              ;-----------------------------------------------------------------------------------------
 30+  8097              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  8097              ;-----------------------------------------------------------------------------------------
 32+  8097 32 0B 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  809A CD A0 80     PREP_PRT_2:	CALL CRtoSCREEN
 34+  809D C3 B2 80     			JP CRtoATTR
 35+  80A0              ;-----------------------------------------------------------------------------------------
 36+  80A0
 37+  80A0              ;-----------------------------------------------------------------------------------------
 38+  80A0              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  80A0              ;	IN  - B=Row, C=Column
 40+  80A0              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  80A0              ;	Conversion:
 42+  80A0              ;			Row FFfff   Column CCCCC
 43+  80A0              ;			HL=%010FF000 fffCCCCC
 44+  80A0              ;-----------------------------------------------------------------------------------------
 45+  80A0              CRtoSCREEN:
 46+  80A0 78           			LD A,B						; %___FFfff
 47+  80A1 F6 40        			OR #40						; %010FFfff
 48+  80A3 E6 F8        			AND #F8						; %010FF000
 49+  80A5 67           			LD H,A
 50+  80A6
 51+  80A6 78           			LD A,B						; %___FFfff
 52+  80A7 E6 07        			AND #7						; %00000fff
 53+  80A9 0F           			RRCA						; %f00000ff
 54+  80AA 0F           			RRCA						; %ff00000f
 55+  80AB 0F           			RRCA						; %fff00000
 56+  80AC B1           			OR C						; %fffCCCCC
 57+  80AD 6F           			LD L,A
 58+  80AE 22 07 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  80B1 C9                       RET
 60+  80B2              ; ----------------------------------------------------------------------------------------
 61+  80B2
 62+  80B2
 63+  80B2
 64+  80B2              ;-----------------------------------------------------------------------------------------
 65+  80B2              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  80B2              ;	IN  - B=Row, C=Column
 67+  80B2              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  80B2              ;	Conversion:
 69+  80B2              ;			Row FFfff   Column CCCCC
 70+  80B2              ;			HL=%010110FF fffCCCCC
 71+  80B2              ;-----------------------------------------------------------------------------------------
 72+  80B2              CRtoATTR:
 73+  80B2 78           			LD A,B						; %___FFfff
 74+  80B3 0F           			RRCA						; %f000FFff
 75+  80B4 0F           			RRCA						; %ff000FFf
 76+  80B5 0F           			RRCA						; %fff000FF
 77+  80B6 6F           			LD L,A
 78+  80B7 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  80B9 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  80BB 67           			LD H,A
 81+  80BC
 82+  80BC 7D           			LD A,L						; %fff000FF
 83+  80BD E6 E0        			AND #E0						; %fff00000
 84+  80BF B1           			OR C						; %fffCCCCC
 85+  80C0 6F           			LD L,A
 86+  80C1
 87+  80C1 22 09 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  80C4 C9                       RET
 89+  80C5              ; ----------------------------------------------------------------------------------------
 90+  80C5
 91+  80C5
 92+  80C5
 93+  80C5              ; ----------------------------------------------------------------------------------------
 94+  80C5              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  80C5              ;-----------------------------------------------------------------------------------------
 96+  80C5              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  80C5 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  80C7 6F           			LD L,A
 99+  80C8 29           			ADD HL,HL
100+  80C9 29           			ADD HL,HL
101+  80CA 29           			ADD HL,HL
102+  80CB 11 0C 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  80CE 19           			ADD HL,DE
104+  80CF EB           			EX  DE,HL					;Value in DE
105+  80D0              			; Continues to printchar below
106+  80D0              ; ----------------------------------------------------------------------------------------
107+  80D0
108+  80D0
109+  80D0              ; ----------------------------------------------------------------------------------------
110+  80D0              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  80D0              ; ----------------------------------------------------------------------------------------
112+  80D0              PRINTCHAR:
113+  80D0 06 08        			LD B,8						; 8 Lines per char
114+  80D2 2A 07 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  80D5
116+  80D5 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  80D6 77           			LD (HL),A					; Move to Printing location
118+  80D7 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  80D8 13                       INC DE 						; next line to be printed
120+  80D9 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  80DB 3A 0B 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  80DE 2A 09 81                 LD HL, (SCR_ATTR_PTR)
123+  80E1 77                       LD (HL),A
124+  80E2 21 09 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  80E5 34                       INC (HL)					; Move Attribute cursor to next char
126+  80E6 21 07 81     			LD HL, SCR_CUR_PTR
127+  80E9 34           			INC (HL)					; update Cursor pointer to next position
128+  80EA C9                       RET
129+  80EB              ; ----------------------------------------------------------------------------------------
130+  80EB
131+  80EB
132+  80EB
133+  80EB              ; ----------------------------------------------------------------------------------------
134+  80EB              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  80EB              ; 				Sets bright 1 and flash 0
136+  80EB              ; ----------------------------------------------------------------------------------------
137+  80EB 3A 0B 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  80EE E6 07                    AND 7						; get Attr INK in A
139+  80F0 07           			RLCA
140+  80F1 07           			RLCA
141+  80F2 07           			RLCA						; move Ink to Paper
142+  80F3 F6 40        			OR 64						; ink 0 bright 1
143+  80F5 32 0B 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  80F8 C9           			RET
145+  80F9              ; ----------------------------------------------------------------------------------------
146+  80F9
147+  80F9
148+  80F9
149+  80F9
150+  80F9 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  80FC 11 01 40     			LD DE,$4001
152+  80FF 01 FF 1A     			LD BC,6911
153+  8102 36 00        			LD (HL),0
154+  8104 ED B0        			LDIR
155+  8106 C9           			RET
156+  8107
157+  8107
158+  8107              SCR_CUR_PTR
158+  8107 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  8109 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  810B 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  810C
162+  810C              CHARSET: incbin "charset.bin"			; Charset used
163+  840C
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\L30.3 - printat.asm
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\template.asm
