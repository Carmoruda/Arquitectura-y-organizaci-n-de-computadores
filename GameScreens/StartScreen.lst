# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\StartScreen.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSETION
  3   0000                      org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3                   DI              ; Disable interruptions.
  7   8001 31 00 00             LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58             LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD 16 81             CALL CLEARSCR   ; Clean screen.
 12   800A
 13   800A              STARTINGSCREEN:
 14   800A                      ; Tetris!
 15   800A 3E 41                LD A, $41       ; Attribute - Blue
 16   800C 06 02                LD B, 2         ; Row
 17   800E 0E 02                LD C, 2         ; Column
 18   8010 DD 21 63 80          LD IX, WELCOMEMESSAGE
 19   8014 CD A5 80             CALL PRINTAT
 20   8017
 21   8017                      ; Would you like to play? (y/n)
 22   8017 3E 41                LD A, $41       ; Attribute - Blue
 23   8019 06 04                LD B, 4         ; Row
 24   801B 0E 02                LD C, 2         ; Column
 25   801D DD 21 6B 80          LD IX, PLAYMESSAGE
 26   8021 CD A5 80             CALL PRINTAT
 27   8024
 28   8024              READYKEY:
 29   8024 3E DF                LD A, $DF       ; Keys: Y, U, I, O, P
 30   8026 DB FE                IN A, ($FE)
 31   8028 CB 67                BIT 4, A        ; Key: Y
 32   802A 28 25                JR Z, GAMESCREEN
 33   802C              READNKEY:
 34   802C 3E 7F                LD A, $7F       ; Keys: B, N, M, SYMB, SPACE
 35   802E DB FE                IN A, ($FE)
 36   8030 CB 5F                BIT 3, A        ; Key: N
 37   8032 20 F0                JR NZ, READYKEY
 38   8034
 39   8034              ENDINGSCREEN:
 40   8034 CD 16 81             CALL CLEARSCR   ; Clean screen.
 41   8037
 42   8037                      ; Bye!
 43   8037 3E 42                LD A, $42       ; Attribute - Red
 44   8039 06 02                LD B, 2         ; Row
 45   803B 0E 02                LD C, 2         ; Column
 46   803D DD 21 89 80          LD IX, BYEMESSAGE
 47   8041 CD A5 80             CALL PRINTAT
 48   8044
 49   8044                      ; Would you like to play? (y/n)
 50   8044 3E 42                LD A, $42       ; Attribute - Red
 51   8046 06 04                LD B, 4         ; Row
 52   8048 0E 02                LD C, 2         ; Column
 53   804A DD 21 8E 80          LD IX, PLAYAGAINMESSAGE
 54   804E CD A5 80             CALL PRINTAT
 55   8051
 56   8051              GAMESCREEN:
 57   8051 CD 16 81             CALL CLEARSCR   ; Clean screen.
 58   8054
 59   8054                      ; Bye!
 60   8054 3E 04                LD A, $04       ; Attribute - Red
 61   8056 06 02                LD B, 2         ; Row
 62   8058 0E 02                LD C, 2         ; Column
 63   805A DD 21 A0 80          LD IX, GAMEMESSAGE
 64   805E CD A5 80             CALL PRINTAT
 65   8061
 66   8061              ENDOFCODE:
 67   8061 18 FE                JR ENDOFCODE
 68   8063
 69   8063 54 45 54 52  WELCOMEMESSAGE: DB "TETRIS!", 0
 69   8067 49 53 21 00
 70   806B 57 4F 55 4C  PLAYMESSAGE: DB "WOULD YOU LIKE TO PLAY? (Y/N)", 0        ; 0 = delimitador de array.
 70   806F 44 20 59 4F
 70   8073 55 20 4C 49
 70   8077 4B 45 20 54
 70   807B 4F 20 50 4C
 70   807F 41 59 3F 20
 70   8083 28 59 2F 4E
 70   8087 29 00
 71   8089 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
 71   808D 00
 72   808E 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0        ; 0 = delimitador de array.
 72   8092 20 41 47 41
 72   8096 49 4E 3F 20
 72   809A 28 59 2F 4E
 72   809E 29 00
 73   80A0 47 41 4D 45  GAMEMESSAGE: DB "GAME", 0        ; 0 = delimitador de array.
 73   80A4 00
 74   80A5
 75   80A5                      INCLUDE "Printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\Printat.asm
  1+  80A5              ; -------------------------------
  2+  80A5              ; ZX Spectrum Text print library
  3+  80A5              ; Daniel Le√≥n - AOC - UFV 2020
  4+  80A5              ; -------------------------------
  5+  80A5
  6+  80A5
  7+  80A5              ; ----------------------------------------------------------------------------------------
  8+  80A5              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  80A5              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  80A5              ;		IN	B	: Row 0..23
 11+  80A5              ;		IN	C	: Column 0..31
 12+  80A5              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  80A5              ; ----------------------------------------------------------------------------------------
 14+  80A5 CD B4 80     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  80A8              ; ----------------------------------------------------------------------------------------
 16+  80A8              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  80A8              ; ----------------------------------------------------------------------------------------
 18+  80A8              ; PRINTSTR - Prints String - IX Points to the String start
 19+  80A8              ; ----------------------------------------------------------------------------------------
 20+  80A8 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  80AB B7           			OR A						; check for end of string (0)
 22+  80AC C8           			RET Z						; Finish printing if 0
 23+  80AD CD E2 80     			CALL PRINTCHNUM
 24+  80B0 DD 23        			INC IX						; Move to next char in string
 25+  80B2 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  80B4              ; ----------------------------------------------------------------------------------------
 27+  80B4
 28+  80B4
 29+  80B4              ;-----------------------------------------------------------------------------------------
 30+  80B4              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  80B4              ;-----------------------------------------------------------------------------------------
 32+  80B4 32 28 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  80B7 CD BD 80     PREP_PRT_2:	CALL CRtoSCREEN
 34+  80BA C3 CF 80     			JP CRtoATTR
 35+  80BD              ;-----------------------------------------------------------------------------------------
 36+  80BD
 37+  80BD              ;-----------------------------------------------------------------------------------------
 38+  80BD              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  80BD              ;	IN  - B=Row, C=Column
 40+  80BD              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  80BD              ;	Conversion:
 42+  80BD              ;			Row FFfff   Column CCCCC
 43+  80BD              ;			HL=%010FF000 fffCCCCC
 44+  80BD              ;-----------------------------------------------------------------------------------------
 45+  80BD              CRtoSCREEN:
 46+  80BD 78           			LD A,B						; %___FFfff
 47+  80BE F6 40        			OR #40						; %010FFfff
 48+  80C0 E6 F8        			AND #F8						; %010FF000
 49+  80C2 67           			LD H,A
 50+  80C3
 51+  80C3 78           			LD A,B						; %___FFfff
 52+  80C4 E6 07        			AND #7						; %00000fff
 53+  80C6 0F           			RRCA						; %f00000ff
 54+  80C7 0F           			RRCA						; %ff00000f
 55+  80C8 0F           			RRCA						; %fff00000
 56+  80C9 B1           			OR C						; %fffCCCCC
 57+  80CA 6F           			LD L,A
 58+  80CB 22 24 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  80CE C9                       RET
 60+  80CF              ; ----------------------------------------------------------------------------------------
 61+  80CF
 62+  80CF
 63+  80CF
 64+  80CF              ;-----------------------------------------------------------------------------------------
 65+  80CF              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  80CF              ;	IN  - B=Row, C=Column
 67+  80CF              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  80CF              ;	Conversion:
 69+  80CF              ;			Row FFfff   Column CCCCC
 70+  80CF              ;			HL=%010110FF fffCCCCC
 71+  80CF              ;-----------------------------------------------------------------------------------------
 72+  80CF              CRtoATTR:
 73+  80CF 78           			LD A,B						; %___FFfff
 74+  80D0 0F           			RRCA						; %f000FFff
 75+  80D1 0F           			RRCA						; %ff000FFf
 76+  80D2 0F           			RRCA						; %fff000FF
 77+  80D3 6F           			LD L,A
 78+  80D4 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  80D6 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  80D8 67           			LD H,A
 81+  80D9
 82+  80D9 7D           			LD A,L						; %fff000FF
 83+  80DA E6 E0        			AND #E0						; %fff00000
 84+  80DC B1           			OR C						; %fffCCCCC
 85+  80DD 6F           			LD L,A
 86+  80DE
 87+  80DE 22 26 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  80E1 C9                       RET
 89+  80E2              ; ----------------------------------------------------------------------------------------
 90+  80E2
 91+  80E2
 92+  80E2
 93+  80E2              ; ----------------------------------------------------------------------------------------
 94+  80E2              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  80E2              ;-----------------------------------------------------------------------------------------
 96+  80E2              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  80E2 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  80E4 6F           			LD L,A
 99+  80E5 29           			ADD HL,HL
100+  80E6 29           			ADD HL,HL
101+  80E7 29           			ADD HL,HL
102+  80E8 11 29 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  80EB 19           			ADD HL,DE
104+  80EC EB           			EX  DE,HL					;Value in DE
105+  80ED              			; Continues to printchar below
106+  80ED              ; ----------------------------------------------------------------------------------------
107+  80ED
108+  80ED
109+  80ED              ; ----------------------------------------------------------------------------------------
110+  80ED              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  80ED              ; ----------------------------------------------------------------------------------------
112+  80ED              PRINTCHAR:
113+  80ED 06 08        			LD B,8						; 8 Lines per char
114+  80EF 2A 24 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  80F2
116+  80F2 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  80F3 77           			LD (HL),A					; Move to Printing location
118+  80F4 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  80F5 13                       INC DE 						; next line to be printed
120+  80F6 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  80F8 3A 28 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  80FB 2A 26 81                 LD HL, (SCR_ATTR_PTR)
123+  80FE 77                       LD (HL),A
124+  80FF 21 26 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8102 34                       INC (HL)					; Move Attribute cursor to next char
126+  8103 21 24 81     			LD HL, SCR_CUR_PTR
127+  8106 34           			INC (HL)					; update Cursor pointer to next position
128+  8107 C9                       RET
129+  8108              ; ----------------------------------------------------------------------------------------
130+  8108
131+  8108
132+  8108
133+  8108              ; ----------------------------------------------------------------------------------------
134+  8108              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  8108              ; 				Sets bright 1 and flash 0
136+  8108              ; ----------------------------------------------------------------------------------------
137+  8108 3A 28 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  810B E6 07                    AND 7						; get Attr INK in A
139+  810D 07           			RLCA
140+  810E 07           			RLCA
141+  810F 07           			RLCA						; move Ink to Paper
142+  8110 F6 40        			OR 64						; ink 0 bright 1
143+  8112 32 28 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  8115 C9           			RET
145+  8116              ; ----------------------------------------------------------------------------------------
146+  8116
147+  8116
148+  8116
149+  8116
150+  8116 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  8119 11 01 40     			LD DE,$4001
152+  811C 01 FF 1A     			LD BC,6911
153+  811F 36 00        			LD (HL),0
154+  8121 ED B0        			LDIR
155+  8123 C9           			RET
156+  8124
157+  8124
158+  8124              SCR_CUR_PTR
158+  8124 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  8126 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  8128 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  8129
162+  8129              CHARSET: incbin "charset.bin"			; Charset used
163+  8429
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\Printat.asm
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\StartScreen.asm
