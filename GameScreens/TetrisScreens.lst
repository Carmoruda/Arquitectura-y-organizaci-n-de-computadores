# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\TetrisScreens.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000                      SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  3   0000                      org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3                   DI              ; Disable interruptions.
  7   8001 31 00 00             LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58             LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD 9C B7             CALL CLEARSCR   ; Clean screen.
 12   800A
 13   800A              ;-----------------------------------------------------------------------------------------
 14   800A              ; STARTINGSCREEN - Displays the start screen with its corresponding messages.
 15   800A              ;-----------------------------------------------------------------------------------------
 16   800A              STARTINGSCREEN:
 17   800A CD 57 80             CALL LOADSTARTINGSCREEN
 18   800D                      ; Would you like to play? (y/n)
 19   800D 3E 39                LD A, $39              ; Attribute - Blue font with white background
 20   800F 06 06                LD B, 6                ; Row
 21   8011 0E 10                LD C, 16               ; Column
 22   8013 DD 21 EA B6          LD IX, PLAYMESSAGE1    ; Would you
 23   8017 CD 2B B7             CALL PRINTAT
 24   801A
 25   801A 3E 39                LD A, $39              ; Attribute - Blue font with white background
 26   801C 06 08                LD B, 8                ; Row
 27   801E 0E 0E                LD C, 14               ; Column
 28   8020 DD 21 F5 B6          LD IX, PLAYMESSAGE2    ; like to play
 29   8024 CD 2B B7             CALL PRINTAT
 30   8027
 31   8027 3E 39                LD A, $39              ; Attribute - Blue font with white background
 32   8029 06 0A                LD B, 10               ; Row
 33   802B 0E 10                LD C, 16               ; Column
 34   802D DD 21 03 B7          LD IX, PLAYMESSAGE3    ; (Y/N)
 35   8031 CD 2B B7             CALL PRINTAT
 36   8034
 37   8034                      ; Cursor
 38   8034 21 57 59             LD HL, $5800 + 10 * 32 + 23    ; Row 10, column 23
 39   8037 36 8F                LD (HL), $8F
 40   8039
 41   8039 AF                   XOR A
 42   803A CD 81 B6             CALL READYKEY
 43   803D FE 01                CP 1
 44   803F CA 45 80             JP Z, GAMESCREEN        ; Y - Game
 45   8042 C3 A5 B6             JP ENDINGSCREEN         ; N - End screen
 46   8045              ;-----------------------------------------------------------------------------------------
 47   8045
 48   8045              ;-----------------------------------------------------------------------------------------
 49   8045              ; GAMESCREEN - Displays the game screen with its corresponding messages.
 50   8045              ;-----------------------------------------------------------------------------------------
 51   8045              GAMESCREEN:
 52   8045 CD 9C B7             CALL CLEARSCR   ; Clean screen.
 53   8048
 54   8048                      ; Game
 55   8048 3E 04                LD A, $04           ; Attribute - Green
 56   804A 06 02                LD B, 2             ; Row
 57   804C 0E 02                LD C, 2             ; Column
 58   804E DD 21 26 B7          LD IX, GAMEMESSAGE  ; Game
 59   8052 CD 2B B7             CALL PRINTAT
 60   8055              ;-----------------------------------------------------------------------------------------
 61   8055
 62   8055              ;-----------------------------------------------------------------------------------------
 63   8055              ; GAMELOOP - Game simulation.
 64   8055              ;-----------------------------------------------------------------------------------------
 65   8055              GAMELOOP:
 66   8055 18 FE                JR GAMELOOP
 67   8057              ;-----------------------------------------------------------------------------------------
 68   8057
 69   8057              ;-----------------------------------------------------------------------------------------
 70   8057              ; LOADSTARTINGSCREEN_LOOP - Set values to paint the graphic.
 71   8057              ;-----------------------------------------------------------------------------------------
 72   8057              LOADSTARTINGSCREEN:
 73   8057 21 6C 80             LD HL, LOADSTARTINGSCREEN_START ; HL = Starting addres of screen data
 74   805A
 75   805A                      ; Save used registers
 76   805A C5                   PUSH BC
 77   805B D5                   PUSH DE
 78   805C
 79   805C 11 00 40             LD DE, $4000 ; Display to video memory area
 80   805F 01 00 1B             LD BC, 6912  ; VidkeoRAM size
 81   8062              ;-----------------------------------------------------------------------------------------
 82   8062
 83   8062              ;-----------------------------------------------------------------------------------------
 84   8062              ; LOADSTARTINGSCREEN_LOOP - Displays the start screen graphic.
 85   8062              ;-----------------------------------------------------------------------------------------
 86   8062              LOADSTARTINGSCREEN_LOOP:
 87   8062 ED A0                LDI ; (DE) = (HL) , DE++, HL++, BC--
 88   8064
 89   8064 78                   LD A, B ; Check if BC is 0
 90   8065 B1                   OR C ; BC = 0 <=> B|C=0
 91   8066 C2 62 80             JP NZ, LOADSTARTINGSCREEN_LOOP ; Next display byte
 92   8069
 93   8069                      ; Retrieve used registers
 94   8069 D1                   POP DE
 95   806A C1                   POP BC
 96   806B
 97   806B C9                   RET
 98   806C              ;-----------------------------------------------------------------------------------------
 99   806C
100   806C              LOADSTARTINGSCREEN_START: INCBIN "StartingScreenTetris.scr"
101   9B6C
102   9B6C              ;-----------------------------------------------------------------------------------------
103   9B6C              ; LOADENDINGSCREEN -  Set values to paint the graphic.
104   9B6C              ;-----------------------------------------------------------------------------------------
105   9B6C              LOADENDINGSCREEN:
106   9B6C 21 81 9B             LD HL, LOADSTARTINGSCREEN_END ; HL = Starting addres of screen data
107   9B6F
108   9B6F                      ; Save used registers
109   9B6F C5                   PUSH BC
110   9B70 D5                   PUSH DE
111   9B71
112   9B71 11 00 40             LD DE, $4000 ; Display to video memory area
113   9B74 01 00 1B             LD BC, 6912  ; VidkeoRAM size
114   9B77              ;-----------------------------------------------------------------------------------------
115   9B77
116   9B77              ;-----------------------------------------------------------------------------------------
117   9B77              ; LOADENDINGSCREEN_LOOP - Displays the end screen graphic.
118   9B77              ;-----------------------------------------------------------------------------------------
119   9B77              LOADENDINGSCREEN_LOOP:
120   9B77 ED A0                LDI ; (DE) = (HL) , DE++, HL++, BC--
121   9B79
122   9B79 78                   LD A, B ; Check if BC is 0
123   9B7A B1                   OR C ; BC = 0 <=> B|C=0
124   9B7B C2 77 9B             JP NZ, LOADENDINGSCREEN_LOOP ; Next display byte
125   9B7E
126   9B7E                      ; Retrieve used registers
127   9B7E D1                   POP DE
128   9B7F C1                   POP BC
129   9B80
130   9B80 C9                   RET
131   9B81              ;-----------------------------------------------------------------------------------------
132   9B81
133   9B81              LOADSTARTINGSCREEN_END: INCBIN "EndingScreenTetris.scr"
134   B681
135   B681
136   B681              ;-----------------------------------------------------------------------------------------
137   B681              ; READYKEY - Identifies whether the user presses the Y key.
138   B681              ;	OUT - A = 1 if Y key is pressed.
139   B681              ;-----------------------------------------------------------------------------------------
140   B681              READYKEY:
141   B681 01 FE DF             LD BC, $DFFE       ; Keys: Y, U, I, O, P
142   B684 ED 78                IN A, (C)
143   B686 CB 67                BIT 4, A        ; Key Y
144   B688 20 09                JR NZ, READNKEY
145   B68A              LOOPY:
146   B68A ED 78                IN A, (C)
147   B68C FE FF                CP $FF
148   B68E 20 FA                JR NZ, LOOPY
149   B690 3E 01                LD A, 1
150   B692 C9                   RET
151   B693              ;-----------------------------------------------------------------------------------------
152   B693
153   B693              ;-----------------------------------------------------------------------------------------
154   B693              ; READNKEY - Identifies whether the user presses the N key.
155   B693              ;	OUT - A = 2 if N key is pressed.
156   B693              ;-----------------------------------------------------------------------------------------
157   B693              READNKEY:
158   B693 3E 7F                LD A, $7F       ; Keys: B, N, M, SYMB, SPACE
159   B695 DB FE                IN A, ($FE)
160   B697 CB 5F                BIT 3, A        ; Key N
161   B699 20 E6                JR NZ, READYKEY
162   B69B              LOOPN:
163   B69B ED 78                IN A, (C)
164   B69D FE FF                CP $FF
165   B69F 20 FA                JR NZ, LOOPN
166   B6A1 3E 02                LD A, 2
167   B6A3 C9                   RET
168   B6A4 C9                   RET
169   B6A5              ;-----------------------------------------------------------------------------------------
170   B6A5
171   B6A5              ;-----------------------------------------------------------------------------------------
172   B6A5              ; ENDINGSCREEN - Displays the end screen with its corresponding messages.
173   B6A5              ;-----------------------------------------------------------------------------------------
174   B6A5              ENDINGSCREEN:
175   B6A5 CD 9C B7             CALL CLEARSCR   ; Clean screen.
176   B6A8
177   B6A8 CD 6C 9B             CALL LOADENDINGSCREEN
178   B6AB
179   B6AB                      ; Bye!
180   B6AB 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
181   B6AD 06 04                LD B, 4                 ; Row
182   B6AF 0E 00                LD C, 0                 ; Column
183   B6B1 DD 21 0A B7          LD IX, BYEMESSAGE       ; Bye!
184   B6B5 CD 2B B7             CALL PRINTAT
185   B6B8
186   B6B8                      ; Play again? (Y/N)
187   B6B8 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
188   B6BA 06 06                LD B, 6                 ; Row
189   B6BC 0E 00                LD C, 0                 ; Column
190   B6BE DD 21 0F B7          LD IX, PLAYAGAINMESSAGE ; Play again? (Y/N)
191   B6C2 CD 2B B7             CALL PRINTAT
192   B6C5
193   B6C5                      ; Cursor
194   B6C5 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 6, column 17
195   B6C8 36 9F                LD (HL), $9F
196   B6CA
197   B6CA AF                   XOR A
198   B6CB CD 81 B6             CALL READYKEY
199   B6CE FE 01                CP 1
200   B6D0 CA 0A 80             JP Z, STARTINGSCREEN    ; Y - Start screen
201   B6D3 3E 3B                LD A, $3B               ; N - End of code.
202   B6D5 06 08                LD B, 8
203   B6D7 0E 0B                LD C, 11
204   B6D9 DD 21 21 B7          LD IX, ENDMESSAGE       ; End!
205   B6DD CD 2B B7             CALL PRINTAT
206   B6E0 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 10, column 23
207   B6E3 36 38                LD (HL), $38
208   B6E5
209   B6E5 C3 E8 B6             JP ENDOFCODE
210   B6E8              ;-----------------------------------------------------------------------------------------
211   B6E8
212   B6E8              ENDOFCODE:
213   B6E8 18 FE                JR ENDOFCODE
214   B6EA
215   B6EA 57 4F 55 4C  PLAYMESSAGE1: DB "WOULD YOU ", 0
215   B6EE 44 20 59 4F
215   B6F2 55 20 00
216   B6F5 4C 49 4B 45  PLAYMESSAGE2: DB "LIKE TO PLAY?", 0
216   B6F9 20 54 4F 20
216   B6FD 50 4C 41 59
216   B701 3F 00
217   B703 20 28 59 2F  PLAYMESSAGE3: DB " (Y/N)", 0
217   B707 4E 29 00
218   B70A 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
218   B70E 00
219   B70F 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0
219   B713 20 41 47 41
219   B717 49 4E 3F 20
219   B71B 28 59 2F 4E
219   B71F 29 00
220   B721 45 4E 44 21  ENDMESSAGE: DB "END!", 0
220   B725 00
221   B726 47 41 4D 45  GAMEMESSAGE: DB "GAME", 0        ; 0 = delimitador de array.
221   B72A 00
222   B72B
223   B72B                      INCLUDE "Printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\Printat.asm
  1+  B72B              ; -------------------------------
  2+  B72B              ; ZX Spectrum Text print library
  3+  B72B              ; Daniel León - AOC - UFV 2020
  4+  B72B              ; -------------------------------
  5+  B72B
  6+  B72B
  7+  B72B              ; ----------------------------------------------------------------------------------------
  8+  B72B              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  B72B              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  B72B              ;		IN	B	: Row 0..23
 11+  B72B              ;		IN	C	: Column 0..31
 12+  B72B              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  B72B              ; ----------------------------------------------------------------------------------------
 14+  B72B CD 3A B7     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  B72E              ; ----------------------------------------------------------------------------------------
 16+  B72E              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  B72E              ; ----------------------------------------------------------------------------------------
 18+  B72E              ; PRINTSTR - Prints String - IX Points to the String start
 19+  B72E              ; ----------------------------------------------------------------------------------------
 20+  B72E DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  B731 B7           			OR A						; check for end of string (0)
 22+  B732 C8           			RET Z						; Finish printing if 0
 23+  B733 CD 68 B7     			CALL PRINTCHNUM
 24+  B736 DD 23        			INC IX						; Move to next char in string
 25+  B738 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  B73A              ; ----------------------------------------------------------------------------------------
 27+  B73A
 28+  B73A
 29+  B73A              ;-----------------------------------------------------------------------------------------
 30+  B73A              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  B73A              ;-----------------------------------------------------------------------------------------
 32+  B73A 32 AE B7     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  B73D CD 43 B7     PREP_PRT_2:	CALL CRtoSCREEN
 34+  B740 C3 55 B7     			JP CRtoATTR
 35+  B743              ;-----------------------------------------------------------------------------------------
 36+  B743
 37+  B743              ;-----------------------------------------------------------------------------------------
 38+  B743              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  B743              ;	IN  - B=Row, C=Column
 40+  B743              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  B743              ;	Conversion:
 42+  B743              ;			Row FFfff   Column CCCCC
 43+  B743              ;			HL=%010FF000 fffCCCCC
 44+  B743              ;-----------------------------------------------------------------------------------------
 45+  B743              CRtoSCREEN:
 46+  B743 78           			LD A,B						; %___FFfff
 47+  B744 F6 40        			OR #40						; %010FFfff
 48+  B746 E6 F8        			AND #F8						; %010FF000
 49+  B748 67           			LD H,A
 50+  B749
 51+  B749 78           			LD A,B						; %___FFfff
 52+  B74A E6 07        			AND #7						; %00000fff
 53+  B74C 0F           			RRCA						; %f00000ff
 54+  B74D 0F           			RRCA						; %ff00000f
 55+  B74E 0F           			RRCA						; %fff00000
 56+  B74F B1           			OR C						; %fffCCCCC
 57+  B750 6F           			LD L,A
 58+  B751 22 AA B7                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  B754 C9                       RET
 60+  B755              ; ----------------------------------------------------------------------------------------
 61+  B755
 62+  B755
 63+  B755
 64+  B755              ;-----------------------------------------------------------------------------------------
 65+  B755              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  B755              ;	IN  - B=Row, C=Column
 67+  B755              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  B755              ;	Conversion:
 69+  B755              ;			Row FFfff   Column CCCCC
 70+  B755              ;			HL=%010110FF fffCCCCC
 71+  B755              ;-----------------------------------------------------------------------------------------
 72+  B755              CRtoATTR:
 73+  B755 78           			LD A,B						; %___FFfff
 74+  B756 0F           			RRCA						; %f000FFff
 75+  B757 0F           			RRCA						; %ff000FFf
 76+  B758 0F           			RRCA						; %fff000FF
 77+  B759 6F           			LD L,A
 78+  B75A E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  B75C F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  B75E 67           			LD H,A
 81+  B75F
 82+  B75F 7D           			LD A,L						; %fff000FF
 83+  B760 E6 E0        			AND #E0						; %fff00000
 84+  B762 B1           			OR C						; %fffCCCCC
 85+  B763 6F           			LD L,A
 86+  B764
 87+  B764 22 AC B7                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  B767 C9                       RET
 89+  B768              ; ----------------------------------------------------------------------------------------
 90+  B768
 91+  B768
 92+  B768
 93+  B768              ; ----------------------------------------------------------------------------------------
 94+  B768              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  B768              ;-----------------------------------------------------------------------------------------
 96+  B768              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  B768 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  B76A 6F           			LD L,A
 99+  B76B 29           			ADD HL,HL
100+  B76C 29           			ADD HL,HL
101+  B76D 29           			ADD HL,HL
102+  B76E 11 AF B6     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  B771 19           			ADD HL,DE
104+  B772 EB           			EX  DE,HL					;Value in DE
105+  B773              			; Continues to printchar below
106+  B773              ; ----------------------------------------------------------------------------------------
107+  B773
108+  B773
109+  B773              ; ----------------------------------------------------------------------------------------
110+  B773              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  B773              ; ----------------------------------------------------------------------------------------
112+  B773              PRINTCHAR:
113+  B773 06 08        			LD B,8						; 8 Lines per char
114+  B775 2A AA B7                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  B778
116+  B778 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  B779 77           			LD (HL),A					; Move to Printing location
118+  B77A 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  B77B 13                       INC DE 						; next line to be printed
120+  B77C 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  B77E 3A AE B7                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  B781 2A AC B7                 LD HL, (SCR_ATTR_PTR)
123+  B784 77                       LD (HL),A
124+  B785 21 AC B7                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  B788 34                       INC (HL)					; Move Attribute cursor to next char
126+  B789 21 AA B7     			LD HL, SCR_CUR_PTR
127+  B78C 34           			INC (HL)					; update Cursor pointer to next position
128+  B78D C9                       RET
129+  B78E              ; ----------------------------------------------------------------------------------------
130+  B78E
131+  B78E
132+  B78E
133+  B78E              ; ----------------------------------------------------------------------------------------
134+  B78E              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  B78E              ; 				Sets bright 1 and flash 0
136+  B78E              ; ----------------------------------------------------------------------------------------
137+  B78E 3A AE B7     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  B791 E6 07                    AND 7						; get Attr INK in A
139+  B793 07           			RLCA
140+  B794 07           			RLCA
141+  B795 07           			RLCA						; move Ink to Paper
142+  B796 F6 40        			OR 64						; ink 0 bright 1
143+  B798 32 AE B7     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  B79B C9           			RET
145+  B79C              ; ----------------------------------------------------------------------------------------
146+  B79C
147+  B79C
148+  B79C
149+  B79C
150+  B79C 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  B79F 11 01 40     			LD DE,$4001
152+  B7A2 01 FF 1A     			LD BC,6911
153+  B7A5 36 00        			LD (HL),0
154+  B7A7 ED B0        			LDIR
155+  B7A9 C9           			RET
156+  B7AA
157+  B7AA
158+  B7AA              SCR_CUR_PTR
158+  B7AA 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  B7AC 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  B7AE 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  B7AF
162+  B7AF              CHARSET: incbin "charset.bin"			; Charset used
163+  BAAF
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\Printat.asm
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\TetrisScreens.asm
