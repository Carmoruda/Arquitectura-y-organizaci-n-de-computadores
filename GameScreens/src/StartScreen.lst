# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\StartScreen.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  3   0000                      org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3                   DI              ; Disable interruptions.
  7   8001 31 00 00             LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58             LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD 63 81             CALL CLEARSCR   ; Clean screen.
 12   800A
 13   800A              ;-----------------------------------------------------------------------------------------
 14   800A              ; STARTINGSCREEN - Displays the start screen with its corresponding messages.
 15   800A              ;-----------------------------------------------------------------------------------------
 16   800A              STARTINGSCREEN:
 17   800A CD 76 84             CALL LOADSTARTINGSCREEN
 18   800D                      ; Would you like to play? (y/n)
 19   800D 3E 39                LD A, $39              ; Attribute - Blue font with white background
 20   800F 06 06                LD B, 6                ; Row
 21   8011 0E 10                LD C, 16               ; Column
 22   8013 DD 21 46 80          LD IX, PLAYMESSAGE1    ; Would you
 23   8017 CD F2 80             CALL PRINTAT
 24   801A
 25   801A 3E 39                LD A, $39              ; Attribute - Blue font with white background
 26   801C 06 08                LD B, 8                ; Row
 27   801E 0E 0E                LD C, 14               ; Column
 28   8020 DD 21 51 80          LD IX, PLAYMESSAGE2    ; like to play
 29   8024 CD F2 80             CALL PRINTAT
 30   8027
 31   8027 3E 39                LD A, $39              ; Attribute - Blue font with white background
 32   8029 06 0A                LD B, 10               ; Row
 33   802B 0E 10                LD C, 16               ; Column
 34   802D DD 21 5F 80          LD IX, PLAYMESSAGE3    ; (Y/N)
 35   8031 CD F2 80             CALL PRINTAT
 36   8034
 37   8034                      ; Cursor
 38   8034 21 57 59             LD HL, $5800 + 10 * 32 + 23    ; Row 10, column 23
 39   8037 36 8F                LD (HL), $8F
 40   8039
 41   8039 AF                   XOR A
 42   803A CD DC 80             CALL READYKEY
 43   803D FE 01                CP 1
 44   803F CA 66 80             JP Z, GAMESCREEN        ; Y - Game
 45   8042 18 39                JR ENDINGSCREEN         ; N - End screen
 46   8044              ;-----------------------------------------------------------------------------------------
 47   8044
 48   8044              ENDOFCODE:
 49   8044 18 FE                JR ENDOFCODE
 50   8046
 51   8046 57 4F 55 4C  PLAYMESSAGE1: DB "WOULD YOU ", 0
 51   804A 44 20 59 4F
 51   804E 55 20 00
 52   8051 4C 49 4B 45  PLAYMESSAGE2: DB "LIKE TO PLAY?", 0
 52   8055 20 54 4F 20
 52   8059 50 4C 41 59
 52   805D 3F 00
 53   805F 20 28 59 2F  PLAYMESSAGE3: DB " (Y/N)", 0
 53   8063 4E 29 00
 54   8066
 55   8066                      INCLUDE "GameScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\GameScreen.asm
  1+  8066              ;-----------------------------------------------------------------------------------------
  2+  8066              ; GAMESCREEN - Displays the game screen with its corresponding messages.
  3+  8066              ;-----------------------------------------------------------------------------------------
  4+  8066              GAMESCREEN:
  5+  8066 CD 63 81             CALL CLEARSCR   ; Clean screen.
  6+  8069
  7+  8069                      ; Game
  8+  8069 3E 04                LD A, $04           ; Attribute - Green
  9+  806B 06 02                LD B, 2             ; Row
 10+  806D 0E 02                LD C, 2             ; Column
 11+  806F DD 21 78 80          LD IX, GAMEMESSAGE  ; Game
 12+  8073 CD F2 80             CALL PRINTAT
 13+  8076              ;-----------------------------------------------------------------------------------------
 14+  8076
 15+  8076              ;-----------------------------------------------------------------------------------------
 16+  8076              ; GAMELOOP - Game simulation.
 17+  8076              ;-----------------------------------------------------------------------------------------
 18+  8076              GAMELOOP:
 19+  8076 18 FE            JR GAMELOOP
 20+  8078              ;-----------------------------------------------------------------------------------------
 21+  8078
 22+  8078 47 41 4D 45  GAMEMESSAGE: DB "GAME", 0        ; 0 = delimitador de array.
 22+  807C 00
 23+  807D
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\GameScreen.asm
 56   807D                      INCLUDE "EndScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\EndScreen.asm
  1+  807D              ;-----------------------------------------------------------------------------------------
  2+  807D              ; ENDINGSCREEN - Displays the end screen with its corresponding messages.
  3+  807D              ;-----------------------------------------------------------------------------------------
  4+  807D              ENDINGSCREEN:
  5+  807D CD 63 81             CALL CLEARSCR   ; Clean screen.
  6+  8080
  7+  8080 CD 8B 9F             CALL LOADENDINGSCREEN
  8+  8083
  9+  8083                      ; Bye!
 10+  8083 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 11+  8085 06 04                LD B, 4                 ; Row
 12+  8087 0E 00                LD C, 0                 ; Column
 13+  8089 DD 21 C0 80          LD IX, BYEMESSAGE       ; Bye!
 14+  808D CD F2 80             CALL PRINTAT
 15+  8090
 16+  8090                      ; Play again? (Y/N)
 17+  8090 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 18+  8092 06 06                LD B, 6                 ; Row
 19+  8094 0E 00                LD C, 0                 ; Column
 20+  8096 DD 21 C5 80          LD IX, PLAYAGAINMESSAGE ; Play again? (Y/N)
 21+  809A CD F2 80             CALL PRINTAT
 22+  809D
 23+  809D                      ; Cursor
 24+  809D 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 6, column 17
 25+  80A0 36 9F                LD (HL), $9F
 26+  80A2
 27+  80A2 AF                   XOR A
 28+  80A3 CD DC 80             CALL READYKEY
 29+  80A6 FE 01                CP 1
 30+  80A8 CA 0A 80             JP Z, STARTINGSCREEN    ; Y - Start screen
 31+  80AB 3E 3B                LD A, $3B               ; N - End of code.
 32+  80AD 06 08                LD B, 8
 33+  80AF 0E 0B                LD C, 11
 34+  80B1 DD 21 D7 80          LD IX, ENDMESSAGE       ; End!
 35+  80B5 CD F2 80             CALL PRINTAT
 36+  80B8 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 10, column 23
 37+  80BB 36 38                LD (HL), $38
 38+  80BD
 39+  80BD C3 44 80             JP ENDOFCODE
 40+  80C0              ;-----------------------------------------------------------------------------------------
 41+  80C0
 42+  80C0 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
 42+  80C4 00
 43+  80C5 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0
 43+  80C9 20 41 47 41
 43+  80CD 49 4E 3F 20
 43+  80D1 28 59 2F 4E
 43+  80D5 29 00
 44+  80D7 45 4E 44 21  ENDMESSAGE: DB "END!", 0
 44+  80DB 00
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\EndScreen.asm
 57   80DC                      INCLUDE "ReadKey.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\ReadKey.asm
  1+  80DC              ;-----------------------------------------------------------------------------------------
  2+  80DC              ; READYKEY - Identifies whether the user presses the Y key.
  3+  80DC              ;	OUT - A = 1 if Y key is pressed.
  4+  80DC              ;-----------------------------------------------------------------------------------------
  5+  80DC              READYKEY:
  6+  80DC 3E DF                LD A, $DF       ; Keys: Y, U, I, O, P
  7+  80DE DB FE                IN A, ($FE)
  8+  80E0 CB 67                BIT 4, A        ; Key Y
  9+  80E2 20 03                JR NZ, READNKEY
 10+  80E4 3E 01                LD A, 1
 11+  80E6 C9                   RET
 12+  80E7              ;-----------------------------------------------------------------------------------------
 13+  80E7
 14+  80E7              ;-----------------------------------------------------------------------------------------
 15+  80E7              ; READNKEY - Identifies whether the user presses the N key.
 16+  80E7              ;	OUT - A = 2 if N key is pressed.
 17+  80E7              ;-----------------------------------------------------------------------------------------
 18+  80E7              READNKEY:
 19+  80E7 3E 7F                LD A, $7F       ; Keys: B, N, M, SYMB, SPACE
 20+  80E9 DB FE                IN A, ($FE)
 21+  80EB CB 5F                BIT 3, A        ; Key N
 22+  80ED 20 ED                JR NZ, READYKEY
 23+  80EF 3E 02                LD A, 2
 24+  80F1 C9                   RET
 25+  80F2              ;-----------------------------------------------------------------------------------------
 26+  80F2
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\ReadKey.asm
 58   80F2                      INCLUDE "Printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\Printat.asm
  1+  80F2              ; -------------------------------
  2+  80F2              ; ZX Spectrum Text print library
  3+  80F2              ; Daniel León - AOC - UFV 2020
  4+  80F2              ; -------------------------------
  5+  80F2
  6+  80F2
  7+  80F2              ; ----------------------------------------------------------------------------------------
  8+  80F2              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  80F2              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  80F2              ;		IN	B	: Row 0..23
 11+  80F2              ;		IN	C	: Column 0..31
 12+  80F2              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  80F2              ; ----------------------------------------------------------------------------------------
 14+  80F2 CD 01 81     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  80F5              ; ----------------------------------------------------------------------------------------
 16+  80F5              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  80F5              ; ----------------------------------------------------------------------------------------
 18+  80F5              ; PRINTSTR - Prints String - IX Points to the String start
 19+  80F5              ; ----------------------------------------------------------------------------------------
 20+  80F5 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  80F8 B7           			OR A						; check for end of string (0)
 22+  80F9 C8           			RET Z						; Finish printing if 0
 23+  80FA CD 2F 81     			CALL PRINTCHNUM
 24+  80FD DD 23        			INC IX						; Move to next char in string
 25+  80FF 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  8101              ; ----------------------------------------------------------------------------------------
 27+  8101
 28+  8101
 29+  8101              ;-----------------------------------------------------------------------------------------
 30+  8101              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  8101              ;-----------------------------------------------------------------------------------------
 32+  8101 32 75 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  8104 CD 0A 81     PREP_PRT_2:	CALL CRtoSCREEN
 34+  8107 C3 1C 81     			JP CRtoATTR
 35+  810A              ;-----------------------------------------------------------------------------------------
 36+  810A
 37+  810A              ;-----------------------------------------------------------------------------------------
 38+  810A              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  810A              ;	IN  - B=Row, C=Column
 40+  810A              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  810A              ;	Conversion:
 42+  810A              ;			Row FFfff   Column CCCCC
 43+  810A              ;			HL=%010FF000 fffCCCCC
 44+  810A              ;-----------------------------------------------------------------------------------------
 45+  810A              CRtoSCREEN:
 46+  810A 78           			LD A,B						; %___FFfff
 47+  810B F6 40        			OR #40						; %010FFfff
 48+  810D E6 F8        			AND #F8						; %010FF000
 49+  810F 67           			LD H,A
 50+  8110
 51+  8110 78           			LD A,B						; %___FFfff
 52+  8111 E6 07        			AND #7						; %00000fff
 53+  8113 0F           			RRCA						; %f00000ff
 54+  8114 0F           			RRCA						; %ff00000f
 55+  8115 0F           			RRCA						; %fff00000
 56+  8116 B1           			OR C						; %fffCCCCC
 57+  8117 6F           			LD L,A
 58+  8118 22 71 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  811B C9                       RET
 60+  811C              ; ----------------------------------------------------------------------------------------
 61+  811C
 62+  811C
 63+  811C
 64+  811C              ;-----------------------------------------------------------------------------------------
 65+  811C              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  811C              ;	IN  - B=Row, C=Column
 67+  811C              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  811C              ;	Conversion:
 69+  811C              ;			Row FFfff   Column CCCCC
 70+  811C              ;			HL=%010110FF fffCCCCC
 71+  811C              ;-----------------------------------------------------------------------------------------
 72+  811C              CRtoATTR:
 73+  811C 78           			LD A,B						; %___FFfff
 74+  811D 0F           			RRCA						; %f000FFff
 75+  811E 0F           			RRCA						; %ff000FFf
 76+  811F 0F           			RRCA						; %fff000FF
 77+  8120 6F           			LD L,A
 78+  8121 E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  8123 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  8125 67           			LD H,A
 81+  8126
 82+  8126 7D           			LD A,L						; %fff000FF
 83+  8127 E6 E0        			AND #E0						; %fff00000
 84+  8129 B1           			OR C						; %fffCCCCC
 85+  812A 6F           			LD L,A
 86+  812B
 87+  812B 22 73 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  812E C9                       RET
 89+  812F              ; ----------------------------------------------------------------------------------------
 90+  812F
 91+  812F
 92+  812F
 93+  812F              ; ----------------------------------------------------------------------------------------
 94+  812F              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  812F              ;-----------------------------------------------------------------------------------------
 96+  812F              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  812F 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  8131 6F           			LD L,A
 99+  8132 29           			ADD HL,HL
100+  8133 29           			ADD HL,HL
101+  8134 29           			ADD HL,HL
102+  8135 11 76 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8138 19           			ADD HL,DE
104+  8139 EB           			EX  DE,HL					;Value in DE
105+  813A              			; Continues to printchar below
106+  813A              ; ----------------------------------------------------------------------------------------
107+  813A
108+  813A
109+  813A              ; ----------------------------------------------------------------------------------------
110+  813A              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  813A              ; ----------------------------------------------------------------------------------------
112+  813A              PRINTCHAR:
113+  813A 06 08        			LD B,8						; 8 Lines per char
114+  813C 2A 71 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  813F
116+  813F 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8140 77           			LD (HL),A					; Move to Printing location
118+  8141 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  8142 13                       INC DE 						; next line to be printed
120+  8143 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  8145 3A 75 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8148 2A 73 81                 LD HL, (SCR_ATTR_PTR)
123+  814B 77                       LD (HL),A
124+  814C 21 73 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  814F 34                       INC (HL)					; Move Attribute cursor to next char
126+  8150 21 71 81     			LD HL, SCR_CUR_PTR
127+  8153 34           			INC (HL)					; update Cursor pointer to next position
128+  8154 C9                       RET
129+  8155              ; ----------------------------------------------------------------------------------------
130+  8155
131+  8155
132+  8155
133+  8155              ; ----------------------------------------------------------------------------------------
134+  8155              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  8155              ; 				Sets bright 1 and flash 0
136+  8155              ; ----------------------------------------------------------------------------------------
137+  8155 3A 75 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8158 E6 07                    AND 7						; get Attr INK in A
139+  815A 07           			RLCA
140+  815B 07           			RLCA
141+  815C 07           			RLCA						; move Ink to Paper
142+  815D F6 40        			OR 64						; ink 0 bright 1
143+  815F 32 75 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  8162 C9           			RET
145+  8163              ; ----------------------------------------------------------------------------------------
146+  8163
147+  8163
148+  8163
149+  8163
150+  8163 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  8166 11 01 40     			LD DE,$4001
152+  8169 01 FF 1A     			LD BC,6911
153+  816C 36 00        			LD (HL),0
154+  816E ED B0        			LDIR
155+  8170 C9           			RET
156+  8171
157+  8171
158+  8171              SCR_CUR_PTR
158+  8171 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  8173 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  8175 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  8176
162+  8176              CHARSET: incbin "charset.bin"			; Charset used
163+  8476
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\Printat.asm
 59   8476                      INCLUDE "LoadStartingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\LoadStartingScreen.asm
  1+  8476              ;-----------------------------------------------------------------------------------------
  2+  8476              ; LOADENDINGSCREEN_LOOP - Displays the end screen with its corresponding messages.
  3+  8476              ;-----------------------------------------------------------------------------------------
  4+  8476              LOADSTARTINGSCREEN:
  5+  8476 21 8B 84         LD HL, LOADSTARTINGSCREEN_START ; HL = Starting addres of screen data
  6+  8479
  7+  8479                  ; Save used registers
  8+  8479 C5               PUSH BC
  9+  847A D5               PUSH DE
 10+  847B
 11+  847B 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  847E 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  8481              ;-----------------------------------------------------------------------------------------
 14+  8481
 15+  8481              ;-----------------------------------------------------------------------------------------
 16+  8481              ; LOADENDINGSCREEN_LOOP - Displays the end screen with its corresponding messages.
 17+  8481              ;-----------------------------------------------------------------------------------------
 18+  8481              LOADSTARTINGSCREEN_LOOP:
 19+  8481 ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  8483
 21+  8483 78               LD A, B ; Check if BC is 0
 22+  8484 B1               OR C ; BC = 0 <=> B|C=0
 23+  8485 C2 81 84         JP NZ, LOADSTARTINGSCREEN_LOOP ; Next display byte
 24+  8488
 25+  8488                  ; Retrieve used registers
 26+  8488 D1               POP DE
 27+  8489 C1               POP BC
 28+  848A
 29+  848A C9               RET
 30+  848B              ;-----------------------------------------------------------------------------------------
 31+  848B
 32+  848B              LOADSTARTINGSCREEN_START: INCBIN "StartingScreenTetris.scr"
 33+  9F8B
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\LoadStartingScreen.asm
 60   9F8B                      INCLUDE "LoadEndingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\LoadEndingScreen.asm
  1+  9F8B              ;-----------------------------------------------------------------------------------------
  2+  9F8B              ; LOADENDINGSCREEN - Displays the end screen with its corresponding messages.
  3+  9F8B              ;-----------------------------------------------------------------------------------------
  4+  9F8B              LOADENDINGSCREEN:
  5+  9F8B 21 A0 9F         LD HL, LOADSTARTINGSCREEN_END ; HL = Starting addres of screen data
  6+  9F8E
  7+  9F8E                  ; Save used registers
  8+  9F8E C5               PUSH BC
  9+  9F8F D5               PUSH DE
 10+  9F90
 11+  9F90 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  9F93 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  9F96              ;-----------------------------------------------------------------------------------------
 14+  9F96
 15+  9F96              ;-----------------------------------------------------------------------------------------
 16+  9F96              ; LOADENDINGSCREEN_LOOP - Displays the end screen with its corresponding messages.
 17+  9F96              ;-----------------------------------------------------------------------------------------
 18+  9F96              LOADENDINGSCREEN_LOOP:
 19+  9F96 ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  9F98
 21+  9F98 78               LD A, B ; Check if BC is 0
 22+  9F99 B1               OR C ; BC = 0 <=> B|C=0
 23+  9F9A C2 96 9F         JP NZ, LOADENDINGSCREEN_LOOP ; Next display byte
 24+  9F9D
 25+  9F9D                  ; Retrieve used registers
 26+  9F9D D1               POP DE
 27+  9F9E C1               POP BC
 28+  9F9F
 29+  9F9F C9               RET
 30+  9FA0              ;-----------------------------------------------------------------------------------------
 31+  9FA0
 32+  9FA0              LOADSTARTINGSCREEN_END: INCBIN "EndingScreenTetris.scr"
 33+  BAA0
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\LoadEndingScreen.asm
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\Arquitectura-y-organizacion-de-computadore\GameScreens\src\StartScreen.asm
